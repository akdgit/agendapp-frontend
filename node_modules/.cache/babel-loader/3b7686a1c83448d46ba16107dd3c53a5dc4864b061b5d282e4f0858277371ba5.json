{"ast":null,"code":"var _jsxFileName = \"/home/juancarlos/Documentos/react/reactProjects/agendapp/client/src/components/FormUpdateUser.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./styles/FormUpdateUser.css\"; // Asegúrate de agregar los estilos aquí.\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpdateUserForm({\n  userId,\n  onClose\n}) {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [fullname, setFullname] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  //const [password, setPassword] = useState(\"\"); // Puede ser opcional\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const navigate = useNavigate();\n  const BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:4000\";\n\n  // **Obtener los datos del usuario al montar el componente**\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}/api/users/${userId}`);\n        const data = await response.json();\n        if (response.ok && data.length > 0) {\n          setName(data[0].name);\n          setFullname(data[0].fullname);\n          setEmail(data[0].email);\n          //setPassword(data[0].password);\n        } else {\n          console.error(\"Error al obtener los datos del usuario:\", data);\n          alert(\"No se pudo cargar la información del usuario\");\n        }\n      } catch (error) {\n        console.error(\"Error al conectar con el servidor:\", error);\n        alert(\"Error al conectar con el servidor\");\n      }\n    };\n    if (userId) fetchUserData(); // Solo obtener los datos si hay un userId válido\n  }, [userId]);\n\n  // **Manejar el envío del formulario para actualizar los datos**\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    try {\n      const updates = {\n        name,\n        fullname,\n        email /*password*/\n      };\n      const response = await fetch(`${BASE_URL}/api/users/${userId}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updates)\n      });\n      if (response.ok) {\n        const updatedUser = await response.json();\n        onClose(); // Cierra el formulario\n        await Swal.fire(\"Éxito\", \"Perfil actualizado correctamente.\", \"success\");\n        //window.location.reload();\n        const nom = localStorage.setItem(\"username\", name); // Actualizar nombre en localStorage// Redirige a la pantalla principal\n        navigate(\"/diary\");\n        console.log(\"El nombre actualizado es: \", nom);\n      } else {\n        Swal.fire(\"Error\", \"Error al actualizar el perfil.\", \"error\");\n      }\n    } catch (error) {\n      console.error(\"Error al conectar con el servidor:\", error);\n      Swal.fire(\"Error\", \"Error al conectar con el servidor.\", \"error\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  /*const handleSubmit = async (e) => {\n      e.preventDefault();\n      setIsSubmitting(true);\n       try {\n          const updates = { name, fullname, email, password };\n          const response = await fetch(`${BASE_URL}/api/users/${userId}`, {\n              method: \"PATCH\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify(updates),\n          });\n           if (response.ok) {\n              alert(\"Perfil actualizado exitosamente\");\n              //await Swal.fire(\"Listo\", \"Perfil actualizado\", \"success\");\n              const updatedUser = await response.json();\n              localStorage.setItem(\"username\", name);\n              onClose(); // Cerrar el formulario\n              navigate(\"/diary\"); // Redirigir a la pantalla principal\n          } else {\n              console.error(\"Error al actualizar el perfil:\", response.status);\n              alert(\"Error al actualizar el perfil\");\n          }\n      } catch (error) {\n          console.error(\"Error al actualizar el perfil:\", error);\n          alert(\"Error al conectar con el servidor\");\n      } finally {\n          setIsSubmitting(false);\n      }\n  };*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overlay1\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"update-user\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form-update-user\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Actualizar perfil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Nombre:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: name,\n            onChange: e => setName(e.target.value),\n            placeholder: \"Nombres\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Apellido:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fullname,\n            onChange: e => setFullname(e.target.value),\n            placeholder: \"Apellidos\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Correo:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            placeholder: \"Direcci\\xF3n de correo\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: isSubmitting,\n          type: \"submit\",\n          children: isSubmitting ? \"Actualizando...\" : \"Actualizar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"cancel-button\",\n          type: \"button\",\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n_s(UpdateUserForm, \"wuYrdASfaP49+MotULEKX/EG6yk=\", false, function () {\n  return [useNavigate];\n});\n_c = UpdateUserForm;\nexport default UpdateUserForm;\nvar _c;\n$RefreshReg$(_c, \"UpdateUserForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Swal","jsxDEV","_jsxDEV","UpdateUserForm","userId","onClose","_s","name","setName","fullname","setFullname","email","setEmail","isSubmitting","setIsSubmitting","navigate","BASE_URL","process","env","REACT_APP_BASE_URL","fetchUserData","response","fetch","data","json","ok","length","console","error","alert","handleSubmit","e","preventDefault","updates","method","headers","body","JSON","stringify","updatedUser","fire","nom","localStorage","setItem","log","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","placeholder","required","disabled","onClick","_c","$RefreshReg$"],"sources":["/home/juancarlos/Documentos/react/reactProjects/agendapp/client/src/components/FormUpdateUser.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./styles/FormUpdateUser.css\"; // Asegúrate de agregar los estilos aquí.\nimport Swal from \"sweetalert2\";\n\nfunction UpdateUserForm({ userId, onClose }) {\n    const [name, setName] = useState(\"\");\n    const [fullname, setFullname] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    //const [password, setPassword] = useState(\"\"); // Puede ser opcional\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const navigate = useNavigate();\n    const BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:4000\";\n    \n    // **Obtener los datos del usuario al montar el componente**\n    useEffect(() => {\n        const fetchUserData = async () => {\n            try {\n                const response = await fetch(`${BASE_URL}/api/users/${userId}`);\n                const data = await response.json();\n                if (response.ok && data.length > 0) {\n                    setName(data[0].name);\n                    setFullname(data[0].fullname);\n                    setEmail(data[0].email);\n                    //setPassword(data[0].password);\n                } else {\n                    console.error(\"Error al obtener los datos del usuario:\", data);\n                    alert(\"No se pudo cargar la información del usuario\");\n                }\n            } catch (error) {\n                console.error(\"Error al conectar con el servidor:\", error);\n                alert(\"Error al conectar con el servidor\");\n            }\n        };\n\n        if (userId) fetchUserData(); // Solo obtener los datos si hay un userId válido\n    }, [userId]);\n\n    // **Manejar el envío del formulario para actualizar los datos**\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsSubmitting(true);\n    \n        try {\n            const updates = { name, fullname, email, /*password*/ };\n            const response = await fetch(`${BASE_URL}/api/users/${userId}`, {\n                method: \"PATCH\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(updates),\n            });\n    \n            if (response.ok) {\n                const updatedUser = await response.json();\n                onClose(); // Cierra el formulario\n                await Swal.fire(\"Éxito\", \"Perfil actualizado correctamente.\", \"success\");\n                //window.location.reload();\n                const nom= localStorage.setItem(\"username\", name); // Actualizar nombre en localStorage// Redirige a la pantalla principal\n                navigate(\"/diary\");\n                console.log(\"El nombre actualizado es: \", nom);\n            } else {\n                Swal.fire(\"Error\", \"Error al actualizar el perfil.\", \"error\");\n            }\n        } catch (error) {\n            console.error(\"Error al conectar con el servidor:\", error);\n            Swal.fire(\"Error\", \"Error al conectar con el servidor.\", \"error\");\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n    \n    \n    /*const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsSubmitting(true);\n\n        try {\n            const updates = { name, fullname, email, password };\n            const response = await fetch(`${BASE_URL}/api/users/${userId}`, {\n                method: \"PATCH\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(updates),\n            });\n\n            if (response.ok) {\n                alert(\"Perfil actualizado exitosamente\");\n                //await Swal.fire(\"Listo\", \"Perfil actualizado\", \"success\");\n                const updatedUser = await response.json();\n                localStorage.setItem(\"username\", name);\n                onClose(); // Cerrar el formulario\n                navigate(\"/diary\"); // Redirigir a la pantalla principal\n            } else {\n                console.error(\"Error al actualizar el perfil:\", response.status);\n                alert(\"Error al actualizar el perfil\");\n            }\n        } catch (error) {\n            console.error(\"Error al actualizar el perfil:\", error);\n            alert(\"Error al conectar con el servidor\");\n        } finally {\n            setIsSubmitting(false);\n        }\n    };*/\n\n    return (\n        <div className=\"overlay1\"> {/* Superposición para desactivar el resto de la pantalla */}\n            <div className=\"update-user\">\n                <form className=\"form-update-user\" onSubmit={handleSubmit}>\n                    <p>Actualizar perfil</p>\n                    <label>\n                        Nombre:\n                        <input\n                            type=\"text\"\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                            placeholder=\"Nombres\"\n                            required\n                        />\n                    </label>\n                    <label>\n                        Apellido:\n                        <input\n                            type=\"text\"\n                            value={fullname}\n                            onChange={(e) => setFullname(e.target.value)}\n                            placeholder=\"Apellidos\"\n                            required\n                        />\n                    </label>\n                    <label>\n                        Correo:\n                        <input\n                            type=\"email\"\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            placeholder=\"Dirección de correo\"\n                            required\n                        />\n                    </label>\n                    <button \n                    disabled={isSubmitting}\n                    type=\"submit\" \n                    >\n                        {isSubmitting ? \"Actualizando...\" : \"Actualizar\"}\n                    </button>\n                    <button\n                        onClick={onClose}\n                        className=\"cancel-button\"\n                        type=\"button\"\n                    >\n                        Cancelar\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default UpdateUserForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}