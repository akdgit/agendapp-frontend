{"ast":null,"code":"var _jsxFileName = \"/home/juancarlos/Documentos/react/reactProjects/agendapp/client/src/components/TaskArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskArea() {\n  _s();\n  const [showForm, setShowForm] = useState(false);\n  const [task, setTask] = useState({\n    description: \"\",\n    // Cambié 'title' a 'description'\n    startDate: \"\",\n    endDate: \"\"\n  });\n  const [taskList, setTaskList] = useState([]);\n  const [userId, setUserId] = useState(null); // Estado para el ID del usuario autenticado\n  const [isEditing, setIsEditing] = useState(false); // Estado para indicar si estamos editando\n  const [editingTaskId, setEditingTaskId] = useState(null);\n\n  // Función para alternar el formulario\n  const handleToggleForm = () => {\n    setShowForm(!showForm);\n  };\n\n  // Manejo de los cambios en los inputs\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setTask({\n      ...task,\n      [name]: value\n    });\n  };\n\n  // Manejo del botón de cancelar\n  const handleCancel = () => {\n    setTask({\n      description: \"\",\n      startDate: \"\",\n      endDate: \"\"\n    });\n    setShowForm(false);\n    setIsEditing(false); // Resetear el estado de edición\n    setEditingTaskId(null); // Limpiar el ID de la tarea en edición\n  };\n\n  //Funcion para editar tarea.\n  const hanleEditTask = task => {\n    const toLocalDatetime = dateString => {\n      const date = new Date(dateString);\n      const offset = date.getTimezoneOffset(); // Obtén la diferencia horaria en minutos\n      const localDate = new Date(date.getTime() - offset * 60 * 1000); // Ajustar al horario local\n      return localDate.toISOString().slice(0, 16); // Formato para datetime-local\n    };\n    const localStartDate = toLocalDatetime(task.start_date);\n    const localEndDate = toLocalDatetime(task.end_date);\n    /*const localStartDate = new Date(task.start_date).toISOString().slice(0, 16); // Formato para datetime-local\n    const localEndDate = new Date(task.end_date).toISOString().slice(0, 16);*/\n    setTask({\n      description: task.description,\n      startDate: localStartDate,\n      // Formatea a yyyy-MM-ddTHH:mm\n      endDate: localEndDate\n    });\n    setEditingTaskId(task.id); // Establecer el ID de la tarea que estamos editando\n    setIsEditing(true); // Cambiar a modo de edición\n    setShowForm(true);\n    console.log(\"El iid es: \", setEditingTaskId);\n  };\n  const handleToggleTaskStatus = async task => {\n    const isCompleting = !task.done; // Determina si estamos completando o reabriendo la tarea\n    const confirmationMessage = isCompleting ? \"¿Deseas marcar esta tarea como completada?\" : \"¿Deseas reabrir esta tarea?\";\n    const confirmed = await Swal.fire({\n      title: confirmationMessage,\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Sí\",\n      cancelButtonText: \"No\"\n    });\n    if (confirmed.isConfirmed) {\n      try {\n        const updatedTask = {\n          done: isCompleting\n        };\n        const response = await fetch(`http://localhost:4000/api/activities/${task.id}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(updatedTask)\n        });\n        if (response.ok) {\n          fetchTasks(); // Actualiza la lista de tareas después del cambio\n        } else {\n          console.error(\"Error al actualizar la tarea:\", response.statusText);\n        }\n      } catch (error) {\n        console.error(\"Error al procesar la tarea:\", error);\n      }\n    }\n  };\n  const formatDateForDatabase = date => {\n    const localDate = new Date(date);\n    const year = localDate.getFullYear();\n    const month = String(localDate.getMonth() + 1).padStart(2, \"0\");\n    const day = String(localDate.getDate()).padStart(2, \"0\");\n    const hours = String(localDate.getHours()).padStart(2, \"0\");\n    const minutes = String(localDate.getMinutes()).padStart(2, \"0\");\n    const seconds = \"00\"; // Asume segundos como 00\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n  };\n\n  /*const handleDoneTask = async (task) => {\n      const action = task.done ? \"reabrir\" : \"completar\";\n      const confirmButtonText = task.done ? \"Sí, reabrir\" : \"Sí, completar\";\n      const result = await Swal.fire({\n          title: `¿Estás seguro que deseas ${action} la tarea?`,\n          icon: 'warning',\n          showCancelButton: true,\n          confirmButtonText: confirmButtonText,\n          cancelButtonText: \"No\"\n      });\n       if (result.isConfirmed) {\n          // Actualizar el campo done en la base de datos\n          const updatedTask = { ...task, done: !task.done };\n           try {\n              const response = await fetch(`http://localhost:4000/api/activities/${task.id}`, {\n                  method: \"PATCH\",\n                  headers: {\n                      \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify(updatedTask)\n              });\n               if (response.ok) {\n                  const result = await response.json();\n                  console.log(`Tarea ${action}da:`, result);\n                  fetchTasks();  // Volver a cargar las tareas actualizadas\n              } else {\n                  console.error(\"Error al actualizar la tarea:\", response.status);\n              }\n          } catch (error) {\n              console.error(\"Error en la solicitud:\", error);\n          }\n      }\n  };*/\n\n  // Función para enviar la tarea (POST)\n  /*const handleSubmit = async (e) => {\n      e.preventDefault();  // Evita el comportamiento por defecto del formulario\n       if (!userId) {\n          console.error(\"User ID is not defined.\");\n          return;\n      }\n       const newTask = {\n          description: task.description,\n          start_date: task.startDate,\n          end_date: task.endDate,\n          user_id: userId  // Incluye el user_id del usuario logeado\n      };\n       try {\n          let response;\n          if (isEditing) {\n              response = await fetch(\"http://localhost:4000/api/activities/${editingTaskId}\", {\n                  method: \"PATCH\",\n                  headers: {\n                      \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify(newTask)\n              });\n          } else {\n              response = await fetch(\"http://localhost:4000/api/activities\", {\n                  method: \"POST\",\n                  headers: {\n                      \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify(newTask)\n              });\n          }\n           if (response.ok) {\n              const result = await response.json();\n              console.log(\"Tarea añadida:\", result);\n              // Actualizar la lista de tareas después de añadir la nueva tarea\n              fetchTasks();\n              // Limpiar el formulario\n              handleCancel();\n          } else {\n              console.error(\"Failed to add task:\", response.status);\n          }\n      } catch (error) {\n          console.error(\"Error while adding task:\", error);\n      }\n  };*/\n\n  // Función para enviar o actualizar la tarea\n  const handleSubmit = async e => {\n    e.preventDefault(); // Evita el comportamiento por defecto del formulario\n\n    if (!userId) {\n      console.error(\"User ID is not defined.\");\n      return;\n    }\n    const newTask = {\n      description: task.description,\n      start_date: new Date(task.startDate).toISOString(),\n      // Convertir a formato ISO\n      end_date: new Date(task.endDate).toISOString(),\n      user_id: userId // Incluye el user_id del usuario logeado\n    };\n    try {\n      let response;\n      if (isEditing) {\n        console.log(`Editando tarea con ID: ${editingTaskId}`); // Log para verificar el ID\n        console.log(\"Datos enviados:\", newTask); // Log para verificar los datos enviados\n\n        response = await fetch(`http://localhost:4000/api/activities/${editingTaskId}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(newTask)\n        });\n      } else {\n        response = await fetch(\"http://localhost:4000/api/activities\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(newTask)\n        });\n      }\n      if (response.ok) {\n        const result = await response.json();\n        console.log(isEditing ? \"Tarea actualizada:\" : \"Tarea añadida:\", result);\n        fetchTasks(); // Actualizar la lista de tareas\n        handleCancel(); // Limpiar el formulario\n      } else {\n        console.error(isEditing ? \"Failed to update task:\" : \"Failed to add task:\", response.status);\n      }\n    } catch (error) {\n      console.error(isEditing ? \"Error while updating task:\" : \"Error while adding task:\", error);\n    }\n  };\n  const handleDeleteTask = async taskId => {\n    // Mostrar la ventana de confirmación\n    const result = await Swal.fire({\n      title: \"¿Estás seguro?\",\n      text: \"Esta acción eliminará la tarea de manera permanente.\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Sí, eliminar\",\n      cancelButtonText: \"Cancelar\"\n    });\n\n    // Si el usuario confirma, procedemos con la eliminación\n    if (result.isConfirmed) {\n      try {\n        const response = await fetch(`http://localhost:4000/api/activities/${taskId}`, {\n          method: \"DELETE\"\n        });\n        if (response.ok) {\n          // Filtra la tarea eliminada de la lista actual\n          setTaskList(prevTasks => prevTasks.filter(task => task.id !== taskId));\n          Swal.fire(\"Eliminada\", \"La tarea ha sido eliminada con éxito.\", \"success\");\n        } else {\n          const errorData = await response.json();\n          console.error(\"Error al eliminar la tarea:\", errorData);\n          Swal.fire(\"Error\", \"No se pudo eliminar la tarea. Intenta nuevamente.\", \"error\");\n        }\n      } catch (error) {\n        console.error(\"Error en la eliminación:\", error);\n        Swal.fire(\"Error\", \"Ocurrió un error al intentar eliminar la tarea.\", \"error\");\n      }\n    } else {\n      Swal.fire(\"Cancelado\", \"La tarea no ha sido eliminada.\", \"info\");\n    }\n  };\n\n  // Función para obtener las tareas del usuario autenticado\n  const fetchTasks = async () => {\n    if (!userId) {\n      console.error(\"User ID is not defined. Cannot fetch tasks.\");\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:4000/api/act-user/${userId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setTaskList(data); // Guardar la lista de tareas en el estado\n      } else {\n        console.error(\"Failed to fetch tasks:\", data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n  useEffect(() => {\n    // Recuperar el userId del localStorage\n    const storedUserId = localStorage.getItem(\"userId\");\n\n    // Verificar si existe el userId almacenado\n    if (storedUserId) {\n      setUserId(storedUserId);\n    } else {\n      console.error(\"No user ID found in localStorage\");\n    }\n  }, []);\n  useEffect(() => {\n    if (userId) {\n      fetchTasks(); // Llamar la función de tareas si el userId es válido\n    } else {\n      console.error(\"User ID is missing or undefined.\");\n    }\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addbutton-and-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"add-task\",\n        onClick: handleToggleForm,\n        children: \"Agregar nueva tarea +\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: `form-task ${showForm ? 'show' : ''}`,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"in-task\",\n          type: \"text\",\n          name: \"description\",\n          placeholder: \"\\xBFQu\\xE9 vas a agendar?\",\n          value: task.description,\n          onChange: handleInputChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Inicia:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"sh-date\",\n            type: \"datetime-local\",\n            name: \"startDate\",\n            value: task.startDate,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Termina:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"sh-date\",\n            type: \"datetime-local\",\n            name: \"endDate\",\n            value: task.endDate,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          type: \"submit\",\n          children: [isEditing ? \"Actualizar\" : \"Agregar\", \"  \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"cancel\",\n          onClick: handleCancel,\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: taskList.length > 0 ? taskList.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `task-item ${task.done ? \"completed\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"desctask\",\n          children: [\" \", task.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"horafecha\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Desde:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 50\n          }, this), \" \", new Date(task.start_date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"horafecha\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Hasta:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 50\n          }, this), \" \", new Date(task.end_date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"botones\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"material-symbols-outlined\",\n            role: \"button\",\n            \"data-tooltip-id\": \"complete-tooltip\",\n            \"data-tooltip-content\": task.done ? \"Reabrir tarea\" : \"Completar tarea\",\n            onClick: () => handleToggleTaskStatus(task),\n            children: task.done ? \"change_circle\" : \"done_all\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `material-symbols-outlined ${task.done ? \"disabled\" : \"\"}`,\n            role: \"button\",\n            \"data-tooltip-id\": \"edit-tooltip\",\n            \"data-tooltip-content\": \"Editar tarea\",\n            onClick: () => !task.done && hanleEditTask(task),\n            children: \"edit_note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `material-symbols-outlined ${task.done ? \"disabled\" : \"\"}`,\n            role: \"button\",\n            \"data-tooltip-id\": \"delete-tooltip\",\n            \"data-tooltip-content\": \"Eliminar tarea\",\n            onClick: () => handleDeleteTask(task.id),\n            children: \"delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-task\",\n        children: \"No hay tareas pendientes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      id: \"complete-tooltip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      id: \"edit-tooltip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      id: \"delete-tooltip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskArea, \"w3BGZYEDWVb7i5ID8dw50MeWAiY=\");\n_c = TaskArea;\nexport default TaskArea;\nvar _c;\n$RefreshReg$(_c, \"TaskArea\");","map":{"version":3,"names":["React","useState","useEffect","Tooltip","Swal","jsxDEV","_jsxDEV","TaskArea","_s","showForm","setShowForm","task","setTask","description","startDate","endDate","taskList","setTaskList","userId","setUserId","isEditing","setIsEditing","editingTaskId","setEditingTaskId","handleToggleForm","handleInputChange","e","name","value","target","handleCancel","hanleEditTask","toLocalDatetime","dateString","date","Date","offset","getTimezoneOffset","localDate","getTime","toISOString","slice","localStartDate","start_date","localEndDate","end_date","id","console","log","handleToggleTaskStatus","isCompleting","done","confirmationMessage","confirmed","fire","title","icon","showCancelButton","confirmButtonText","cancelButtonText","isConfirmed","updatedTask","response","fetch","method","headers","body","JSON","stringify","ok","fetchTasks","error","statusText","formatDateForDatabase","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","handleSubmit","preventDefault","newTask","user_id","result","json","status","handleDeleteTask","taskId","text","prevTasks","filter","errorData","data","storedUserId","localStorage","getItem","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","length","map","index","toLocaleString","role","_c","$RefreshReg$"],"sources":["/home/juancarlos/Documentos/react/reactProjects/agendapp/client/src/components/TaskArea.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport Swal from \"sweetalert2\";\n\nfunction TaskArea() {\n    const [showForm, setShowForm] = useState(false);\n    const [task, setTask] = useState({\n        description: \"\",  // Cambié 'title' a 'description'\n        startDate: \"\",\n        endDate: \"\"\n    });\n    const [taskList, setTaskList] = useState([]);  \n    const [userId, setUserId] = useState(null);  // Estado para el ID del usuario autenticado\n    const [isEditing, setIsEditing] = useState(false);  // Estado para indicar si estamos editando\n    const [editingTaskId, setEditingTaskId] = useState(null);\n    \n    // Función para alternar el formulario\n    const handleToggleForm = () => {\n        setShowForm(!showForm);\n    };\n\n    // Manejo de los cambios en los inputs\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setTask({\n            ...task,\n            [name]: value\n        });\n    };\n\n    // Manejo del botón de cancelar\n    const handleCancel = () => {\n        setTask({\n            description: \"\",\n            startDate: \"\",\n            endDate: \"\"\n        });\n        setShowForm(false);\n        setIsEditing(false);  // Resetear el estado de edición\n        setEditingTaskId(null);  // Limpiar el ID de la tarea en edición\n    };\n\n        //Funcion para editar tarea.\n    const hanleEditTask = (task) => {\n        const toLocalDatetime = (dateString) => {\n            const date = new Date(dateString);\n            const offset = date.getTimezoneOffset(); // Obtén la diferencia horaria en minutos\n            const localDate = new Date(date.getTime() - offset * 60 * 1000); // Ajustar al horario local\n            return localDate.toISOString().slice(0, 16); // Formato para datetime-local\n        };\n        const localStartDate = toLocalDatetime(task.start_date);\n    const localEndDate = toLocalDatetime(task.end_date);\n        /*const localStartDate = new Date(task.start_date).toISOString().slice(0, 16); // Formato para datetime-local\n        const localEndDate = new Date(task.end_date).toISOString().slice(0, 16);*/\n        setTask({\n            description: task.description,\n            startDate: localStartDate,  // Formatea a yyyy-MM-ddTHH:mm\n            endDate: localEndDate\n        });\n        setEditingTaskId(task.id);  // Establecer el ID de la tarea que estamos editando\n        setIsEditing(true);  // Cambiar a modo de edición\n        setShowForm(true);  \n        console.log(\"El iid es: \", setEditingTaskId);\n    };\n\n    const handleToggleTaskStatus = async (task) => {\n        const isCompleting = !task.done; // Determina si estamos completando o reabriendo la tarea\n        const confirmationMessage = isCompleting\n            ? \"¿Deseas marcar esta tarea como completada?\"\n            : \"¿Deseas reabrir esta tarea?\";\n        const confirmed = await Swal.fire({\n            title: confirmationMessage,\n            icon: \"question\",\n            showCancelButton: true,\n            confirmButtonText: \"Sí\",\n            cancelButtonText: \"No\",\n        });\n    \n        if (confirmed.isConfirmed) {\n            try {\n                const updatedTask = { done: isCompleting };\n                const response = await fetch(`http://localhost:4000/api/activities/${task.id}`, {\n                    method: \"PATCH\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(updatedTask),\n                });\n    \n                if (response.ok) {\n                    fetchTasks(); // Actualiza la lista de tareas después del cambio\n                } else {\n                    console.error(\"Error al actualizar la tarea:\", response.statusText);\n                }\n            } catch (error) {\n                console.error(\"Error al procesar la tarea:\", error);\n            }\n        }\n    };\n\n    const formatDateForDatabase = (date) => {\n        const localDate = new Date(date);\n        const year = localDate.getFullYear();\n        const month = String(localDate.getMonth() + 1).padStart(2, \"0\");\n        const day = String(localDate.getDate()).padStart(2, \"0\");\n        const hours = String(localDate.getHours()).padStart(2, \"0\");\n        const minutes = String(localDate.getMinutes()).padStart(2, \"0\");\n        const seconds = \"00\"; // Asume segundos como 00\n        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    };\n    \n\n    /*const handleDoneTask = async (task) => {\n        const action = task.done ? \"reabrir\" : \"completar\";\n        const confirmButtonText = task.done ? \"Sí, reabrir\" : \"Sí, completar\";\n        const result = await Swal.fire({\n            title: `¿Estás seguro que deseas ${action} la tarea?`,\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: confirmButtonText,\n            cancelButtonText: \"No\"\n        });\n\n        if (result.isConfirmed) {\n            // Actualizar el campo done en la base de datos\n            const updatedTask = { ...task, done: !task.done };\n\n            try {\n                const response = await fetch(`http://localhost:4000/api/activities/${task.id}`, {\n                    method: \"PATCH\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(updatedTask)\n                });\n\n                if (response.ok) {\n                    const result = await response.json();\n                    console.log(`Tarea ${action}da:`, result);\n                    fetchTasks();  // Volver a cargar las tareas actualizadas\n                } else {\n                    console.error(\"Error al actualizar la tarea:\", response.status);\n                }\n            } catch (error) {\n                console.error(\"Error en la solicitud:\", error);\n            }\n        }\n    };*/\n\n    // Función para enviar la tarea (POST)\n    /*const handleSubmit = async (e) => {\n        e.preventDefault();  // Evita el comportamiento por defecto del formulario\n\n        if (!userId) {\n            console.error(\"User ID is not defined.\");\n            return;\n        }\n\n        const newTask = {\n            description: task.description,\n            start_date: task.startDate,\n            end_date: task.endDate,\n            user_id: userId  // Incluye el user_id del usuario logeado\n        };\n\n        try {\n            let response;\n            if (isEditing) {\n                response = await fetch(\"http://localhost:4000/api/activities/${editingTaskId}\", {\n                    method: \"PATCH\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(newTask)\n                });\n            } else {\n                response = await fetch(\"http://localhost:4000/api/activities\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(newTask)\n                });\n            }\n\n            if (response.ok) {\n                const result = await response.json();\n                console.log(\"Tarea añadida:\", result);\n                // Actualizar la lista de tareas después de añadir la nueva tarea\n                fetchTasks();\n                // Limpiar el formulario\n                handleCancel();\n            } else {\n                console.error(\"Failed to add task:\", response.status);\n            }\n        } catch (error) {\n            console.error(\"Error while adding task:\", error);\n        }\n    };*/\n\n    // Función para enviar o actualizar la tarea\n    const handleSubmit = async (e) => {\n        e.preventDefault();  // Evita el comportamiento por defecto del formulario\n    \n        if (!userId) {\n            console.error(\"User ID is not defined.\");\n            return;\n        }\n    \n        const newTask = {\n            description: task.description,\n            start_date: new Date(task.startDate).toISOString(), // Convertir a formato ISO\n            end_date: new Date(task.endDate).toISOString(),\n            user_id: userId  // Incluye el user_id del usuario logeado\n        };\n    \n        try {\n            let response;\n            if (isEditing) {\n                console.log(`Editando tarea con ID: ${editingTaskId}`);  // Log para verificar el ID\n                console.log(\"Datos enviados:\", newTask);  // Log para verificar los datos enviados\n    \n                response = await fetch(`http://localhost:4000/api/activities/${editingTaskId}`, {\n                    method: \"PATCH\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(newTask)\n                });\n            } else {\n                response = await fetch(\"http://localhost:4000/api/activities\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(newTask)\n                });\n            }\n    \n            if (response.ok) {\n                const result = await response.json();\n                console.log(isEditing ? \"Tarea actualizada:\" : \"Tarea añadida:\", result);\n                fetchTasks();  // Actualizar la lista de tareas\n                handleCancel();  // Limpiar el formulario\n            } else {\n                console.error(isEditing ? \"Failed to update task:\" : \"Failed to add task:\", response.status);\n            }\n        } catch (error) {\n            console.error(isEditing ? \"Error while updating task:\" : \"Error while adding task:\", error);\n        }\n    };    \n\n    const handleDeleteTask = async (taskId) => {\n        // Mostrar la ventana de confirmación\n        const result = await Swal.fire({\n            title: \"¿Estás seguro?\",\n            text: \"Esta acción eliminará la tarea de manera permanente.\",\n            icon: \"warning\",\n            showCancelButton: true,\n            confirmButtonText: \"Sí, eliminar\",\n            cancelButtonText: \"Cancelar\",\n        });\n\n        // Si el usuario confirma, procedemos con la eliminación\n        if (result.isConfirmed) {\n            try {\n                const response = await fetch(`http://localhost:4000/api/activities/${taskId}`, {\n                    method: \"DELETE\",\n                });\n\n                if (response.ok) {\n                    // Filtra la tarea eliminada de la lista actual\n                    setTaskList((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n                    Swal.fire(\"Eliminada\", \"La tarea ha sido eliminada con éxito.\", \"success\");\n                } else {\n                    const errorData = await response.json();\n                    console.error(\"Error al eliminar la tarea:\", errorData);\n                    Swal.fire(\"Error\", \"No se pudo eliminar la tarea. Intenta nuevamente.\", \"error\");\n                }\n            } catch (error) {\n                console.error(\"Error en la eliminación:\", error);\n                Swal.fire(\"Error\", \"Ocurrió un error al intentar eliminar la tarea.\", \"error\");\n            }\n        } else {\n            Swal.fire(\"Cancelado\", \"La tarea no ha sido eliminada.\", \"info\");\n         }\n    };\n\n    // Función para obtener las tareas del usuario autenticado\n    const fetchTasks = async () => {\n        if (!userId) {\n            console.error(\"User ID is not defined. Cannot fetch tasks.\");\n            return;\n        }\n        try {\n            const response = await fetch(`http://localhost:4000/api/act-user/${userId}`);\n            const data = await response.json();\n    \n            if (response.ok) {\n                setTaskList(data);  // Guardar la lista de tareas en el estado\n            } else {\n                console.error(\"Failed to fetch tasks:\", data);\n            }\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n        }\n    };\n\n    useEffect(() => {\n        // Recuperar el userId del localStorage\n        const storedUserId = localStorage.getItem(\"userId\");\n    \n        // Verificar si existe el userId almacenado\n        if (storedUserId) {\n            setUserId(storedUserId);\n        } else {\n            console.error(\"No user ID found in localStorage\");\n        }\n    }, []);\n    \n    useEffect(() => {\n        if (userId) {\n            fetchTasks();  // Llamar la función de tareas si el userId es válido\n        } else {\n            console.error(\"User ID is missing or undefined.\");\n        }\n    }, [userId]);\n\n    return (\n        <div className=\"task-container\">\n            <div className=\"addbutton-and-form\">\n                <span className=\"add-task\" onClick={handleToggleForm}>Agregar nueva tarea +</span>\n                <form className={`form-task ${showForm ? 'show' : ''}`} onSubmit={handleSubmit}>\n                    <input \n                        className=\"in-task\"\n                        type=\"text\"\n                        name=\"description\"\n                        placeholder=\"¿Qué vas a agendar?\"\n                        value={task.description}\n                        onChange={handleInputChange}\n                        required\n                    />\n                    <label>\n                        Inicia: \n                        <input \n                            className=\"sh-date\"\n                            type=\"datetime-local\"\n                            name=\"startDate\"\n                            value={task.startDate}\n                            onChange={handleInputChange}\n                            required\n                        />\n                    </label>\n                    <label>\n                        Termina: \n                        <input \n                            className=\"sh-date\"\n                            type=\"datetime-local\"\n                            name=\"endDate\"\n                            value={task.endDate}\n                            onChange={handleInputChange}\n                            required\n                        />\n                    </label>\n                    <button className=\"add-button\" type=\"submit\">\n                        {isEditing ? \"Actualizar\" : \"Agregar\"}  {/* Cambia el texto dependiendo de si estamos editando */}\n                    </button>\n                    <button \n                        type=\"button\"\n                        className=\"cancel\"\n                        onClick={handleCancel}\n                    >\n                        Cancelar\n                    </button>\n                </form>\n            </div>\n\n            <div className=\"task-list\">\n                {taskList.length > 0 ? (\n                    taskList.map((task, index) => (\n                        <div\n                        key={index}\n                        className={`task-item ${task.done ? \"completed\" : \"\"}`}\n                    >\n                        <p className=\"desctask\"> {task.description}</p>\n                        <p className=\"horafecha\"><strong>Desde:</strong> {new Date(task.start_date).toLocaleString()}</p>\n                        <p className=\"horafecha\"><strong>Hasta:</strong> {new Date(task.end_date).toLocaleString()}</p>\n                        <div className=\"botones\">\n                            <span\n                                className=\"material-symbols-outlined\"\n                                role=\"button\"\n                                data-tooltip-id=\"complete-tooltip\"\n                                data-tooltip-content={task.done ? \"Reabrir tarea\" : \"Completar tarea\"}\n                                onClick={() => handleToggleTaskStatus(task)}\n                            >\n                                {task.done ? \"change_circle\" : \"done_all\"}\n                            </span>\n                    \n                            {/* Los otros botones se desactivan si la tarea está completada */}\n                            <span\n                                className={`material-symbols-outlined ${task.done ? \"disabled\" : \"\"}`}\n                                role=\"button\"\n                                data-tooltip-id=\"edit-tooltip\"\n                                data-tooltip-content=\"Editar tarea\"\n                                onClick={() => !task.done && hanleEditTask(task)}\n                            >\n                                edit_note\n                            </span>\n                            <span\n                                className={`material-symbols-outlined ${task.done ? \"disabled\" : \"\"}`}\n                                role=\"button\"\n                                data-tooltip-id=\"delete-tooltip\"\n                                data-tooltip-content=\"Eliminar tarea\"\n                                onClick={() => handleDeleteTask(task.id)}\n                            >\n                                delete\n                            </span>\n                        </div>\n                    </div>                    \n                    ))\n                ) : (\n                    <p className=\"no-task\">No hay tareas pendientes</p>\n                )}\n            </div>\n            <Tooltip id=\"complete-tooltip\" />\n            <Tooltip id=\"edit-tooltip\" />\n            <Tooltip id=\"delete-tooltip\" />\n        </div>\n    );\n}\n\nexport default TaskArea;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}