{"ast":null,"code":"var _jsxFileName = \"/home/juancarlos/Documentos/react/reactProjects/agendapp/client/src/components/TaskArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskArea() {\n  _s();\n  const [showForm, setShowForm] = useState(false);\n  const [task, setTask] = useState({\n    title: \"\",\n    startDate: \"\",\n    endDate: \"\"\n  });\n  const [taskList, setTaskList] = useState([]);\n  const [userId, setUserId] = useState(null); // Estado para el ID del usuario autenticado\n\n  // Función para alternar el formulario\n  const handleToggleForm = () => {\n    setShowForm(!showForm);\n  };\n\n  // Manejo de los cambios en los inputs\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setTask({\n      ...task,\n      [name]: value\n    });\n  };\n\n  // Manejo del botón de cancelar\n  const handleCancel = () => {\n    setTask({\n      title: \"\",\n      startDate: \"\",\n      endDate: \"\"\n    });\n    setShowForm(false);\n  };\n\n  // Función para obtener las tareas del usuario autenticado\n  const fetchTasks = async () => {\n    if (!userId) return; // Si no hay usuario autenticado, no continuar\n    try {\n      const response = await fetch(`http://localhost:4000/api/act-user/${userId}`);\n      const data = await response.json();\n      setTaskList(data); // Guardar la lista de tareas en el estado\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n  useEffect(() => {\n    // Recuperar el userId del localStorage\n    const storedUserId = localStorage.getItem(\"userId\");\n\n    // Verificar si existe el userId almacenado\n    if (storedUserId) {\n      setUserId(storedUserId);\n    } else {\n      console.error(\"No user ID found in localStorage\");\n    }\n  }, []);\n  useEffect(() => {\n    if (userId) {\n      fetchTasks(); // Llamar la función de tareas si el userId es válido\n    } else {\n      console.error(\"User ID is missing or undefined.\");\n    }\n  }, [userId]);\n\n  /*\n  // useEffect para cargar el ID del usuario autenticado y las tareas al montar el componente\n  useEffect(() => {\n      // Obtener el userId del localStorage al montar el componente\n      const storedUserId = localStorage.getItem(\"userId\");  // Obtener el userId del localStorage\n      console.log(\"Stored User ID:\", storedUserId); \n      if (storedUserId) {\n          setUserId(storedUserId);  // Actualizar el estado con el ID del usuario\n      }\n  }, []);\n   // Llamar a fetchTasks cuando el userId cambie\n  useEffect(() => {\n      if (userId) {\n          fetchTasks();  // Llamar la función para obtener las tareas cuando se tiene el userId\n      }\n  }, [userId]);*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addbutton-and-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"add-task\",\n        onClick: handleToggleForm,\n        children: \"Agregar nueva tarea +\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: `form-task ${showForm ? 'show' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"in-task\",\n          type: \"text\",\n          name: \"title\",\n          placeholder: \"\\xBFQu\\xE9 vas a agendar?\",\n          value: task.title,\n          onChange: handleInputChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Inicia:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"sh-date\",\n            type: \"datetime-local\",\n            name: \"startDate\",\n            value: task.startDate,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Termina:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"sh-date\",\n            type: \"datetime-local\",\n            name: \"endDate\",\n            value: task.endDate,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          type: \"submit\",\n          children: \"Agregar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"cancel\",\n          onClick: handleCancel,\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: taskList.length > 0 ? taskList.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tarea:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 32\n          }, this), \" \", task.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Inicia:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 32\n          }, this), \" \", new Date(task.start_date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Termina:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 32\n          }, this), \" \", new Date(task.end_date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay tareas pendientes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskArea, \"VKYKgbfEwNuPpGv09BBWmCg/Eaw=\");\n_c = TaskArea;\nexport default TaskArea;\n\n/*import { index } from \"mathjs\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction TaskArea() {\n    const [showForm, setShowForm] = useState(false);\n    const [task, setTask] = useState({\n        title: \"\",\n        startDate: \"\",\n        endDate: \"\"\n    });\n\n    const [taskList, setTaskList] = useState([]);\n    const [userId, setUserId] = useState(null);\n\n    const handleToggleForm = () => {\n        setShowForm(!showForm);\n    };\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setTask({\n            ...task,\n            [name]: value\n        });\n    };\n\n    const handleCancel = () => {\n        setTask({\n            title: \"\",\n            startDate: \"\",\n            endDate: \"\"\n        });\n        setShowForm(false);\n    };\n\n     // Función para obtener las tareas del usuario autenticado\n     const fetchTask = async () => {\n        if (!userId) return;\n        try {\n            const  response = await fetch(`http://localhost:4000/api/act-user/${userId}`);\n            const data = await response.json();\n            setTaskList(data);\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n        }\n     };\n\n     // useEffect para cargar el ID del usuario autenticado y las tareas al montar el componente\n     useEffect(() =>{\n        const storeUserId = localStorage.getItem(\"userId\");\n        if (storeUserId) {\n            setUserId(storeUserId);\n        }\n     }, [] );\n\n    useEffect(() => {\n        fetchTask();\n    } , [userId]);\n\n    return (\n        <div className=\"task-container\">\n            <div className=\"addbutton-and-form\">\n                <span className=\"add-task\" onClick={handleToggleForm}>Agregar nueva tarea +</span>\n                <form className={`form-task ${showForm ? 'show' : ''}`}>\n                    <input \n                        className=\"in-task\"\n                        type=\"text\"\n                        name=\"title\"\n                        placeholder=\"¿Qué vas a agendar?\"\n                        value={task.title}\n                        onChange={handleInputChange}\n                        required\n                    />\n                    <label>\n                        Inicia: \n                        <input \n                            className=\"sh-date\"\n                            type=\"datetime-local\"\n                            name=\"startDate\"\n                            value={task.startDate}\n                            onChange={handleInputChange}\n                            required\n                        />\n                    </label>\n                    <label>\n                        Termina: \n                        <input \n                            className=\"sh-date\"\n                            type=\"datetime-local\"\n                            name=\"endDate\"\n                            value={task.endDate}\n                            onChange={handleInputChange}\n                            required\n                        />\n                    </label>\n                    <button \n                        className=\"add-button\"\n                        type=\"submit\"\n                    >\n                        Agregar\n                    </button>\n                    <button \n                        type=\"button\"\n                        className=\"cancel\"\n                        onClick={handleCancel}\n                    >\n                        Cancelar\n                    </button>\n                </form>\n            </div>\n            <div className=\"task-list\">\n                {taskList.length > 0 ? (\n                    taskList.map((task, index) => (\n                        <div key={index} className=\"task-item\">\n                            <p><strong>Tarea:</strong> {task.description}</p>\n                            <p><strong>Inicia:</strong> {new Date(task.start_date).toLocaleString()}</p>\n                            <p><strong>Termina:</strong> {new Date(task.end_date).toLocaleString()}</p>\n                        </div>\n                    ))\n                ) : (\n                    <p>No hay tareas Pendientes.</p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default TaskArea;\n*/\nvar _c;\n$RefreshReg$(_c, \"TaskArea\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TaskArea","_s","showForm","setShowForm","task","setTask","title","startDate","endDate","taskList","setTaskList","userId","setUserId","handleToggleForm","handleInputChange","e","name","value","target","handleCancel","fetchTasks","response","fetch","data","json","error","console","storedUserId","localStorage","getItem","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","required","length","map","index","description","Date","start_date","toLocaleString","end_date","_c","$RefreshReg$"],"sources":["/home/juancarlos/Documentos/react/reactProjects/agendapp/client/src/components/TaskArea.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction TaskArea() {\n    const [showForm, setShowForm] = useState(false);\n    const [task, setTask] = useState({\n        title: \"\",\n        startDate: \"\",\n        endDate: \"\"\n    });\n    const [taskList, setTaskList] = useState([]);  \n    const [userId, setUserId] = useState(null);  // Estado para el ID del usuario autenticado\n\n    // Función para alternar el formulario\n    const handleToggleForm = () => {\n        setShowForm(!showForm);\n    };\n\n    // Manejo de los cambios en los inputs\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setTask({\n            ...task,\n            [name]: value\n        });\n    };\n\n    // Manejo del botón de cancelar\n    const handleCancel = () => {\n        setTask({\n            title: \"\",\n            startDate: \"\",\n            endDate: \"\"\n        });\n        setShowForm(false);\n    };\n\n    // Función para obtener las tareas del usuario autenticado\n    const fetchTasks = async () => {\n        if (!userId) return; // Si no hay usuario autenticado, no continuar\n        try {\n            const response = await fetch(`http://localhost:4000/api/act-user/${userId}`);\n            const data = await response.json();\n            setTaskList(data);  // Guardar la lista de tareas en el estado\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n        }\n    };\n\n    useEffect(() => {\n        // Recuperar el userId del localStorage\n        const storedUserId = localStorage.getItem(\"userId\");\n    \n        // Verificar si existe el userId almacenado\n        if (storedUserId) {\n            setUserId(storedUserId);\n        } else {\n            console.error(\"No user ID found in localStorage\");\n        }\n    }, []);\n    \n    useEffect(() => {\n        if (userId) {\n            fetchTasks();  // Llamar la función de tareas si el userId es válido\n        } else {\n            console.error(\"User ID is missing or undefined.\");\n        }\n    }, [userId]);\n    \n\n    /*\n    // useEffect para cargar el ID del usuario autenticado y las tareas al montar el componente\n    useEffect(() => {\n        // Obtener el userId del localStorage al montar el componente\n        const storedUserId = localStorage.getItem(\"userId\");  // Obtener el userId del localStorage\n        console.log(\"Stored User ID:\", storedUserId); \n        if (storedUserId) {\n            setUserId(storedUserId);  // Actualizar el estado con el ID del usuario\n        }\n    }, []);\n\n    // Llamar a fetchTasks cuando el userId cambie\n    useEffect(() => {\n        if (userId) {\n            fetchTasks();  // Llamar la función para obtener las tareas cuando se tiene el userId\n        }\n    }, [userId]);*/\n\n    return (\n        <div className=\"task-container\">\n            <div className=\"addbutton-and-form\">\n                <span className=\"add-task\" onClick={handleToggleForm}>Agregar nueva tarea +</span>\n                <form className={`form-task ${showForm ? 'show' : ''}`}>\n                    <input \n                        className=\"in-task\"\n                        type=\"text\"\n                        name=\"title\"\n                        placeholder=\"¿Qué vas a agendar?\"\n                        value={task.title}\n                        onChange={handleInputChange}\n                        required\n                    />\n                    <label>\n                        Inicia: \n                        <input \n                            className=\"sh-date\"\n                            type=\"datetime-local\"\n                            name=\"startDate\"\n                            value={task.startDate}\n                            onChange={handleInputChange}\n                            required\n                        />\n                    </label>\n                    <label>\n                        Termina: \n                        <input \n                            className=\"sh-date\"\n                            type=\"datetime-local\"\n                            name=\"endDate\"\n                            value={task.endDate}\n                            onChange={handleInputChange}\n                            required\n                        />\n                    </label>\n                    <button \n                        className=\"add-button\"\n                        type=\"submit\"\n                    >\n                        Agregar\n                    </button>\n                    <button \n                        type=\"button\"\n                        className=\"cancel\"\n                        onClick={handleCancel}\n                    >\n                        Cancelar\n                    </button>\n                </form>\n            </div>\n\n            <div className=\"task-list\">\n                {taskList.length > 0 ? (\n                    taskList.map((task, index) => (\n                        <div key={index} className=\"task-item\">\n                            <p><strong>Tarea:</strong> {task.description}</p>\n                            <p><strong>Inicia:</strong> {new Date(task.start_date).toLocaleString()}</p>\n                            <p><strong>Termina:</strong> {new Date(task.end_date).toLocaleString()}</p>\n                        </div>\n                    ))\n                ) : (\n                    <p>No hay tareas pendientes</p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default TaskArea;\n\n\n\n\n\n\n\n\n\n\n/*import { index } from \"mathjs\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction TaskArea() {\n    const [showForm, setShowForm] = useState(false);\n    const [task, setTask] = useState({\n        title: \"\",\n        startDate: \"\",\n        endDate: \"\"\n    });\n\n    const [taskList, setTaskList] = useState([]);\n    const [userId, setUserId] = useState(null);\n\n    const handleToggleForm = () => {\n        setShowForm(!showForm);\n    };\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setTask({\n            ...task,\n            [name]: value\n        });\n    };\n\n    const handleCancel = () => {\n        setTask({\n            title: \"\",\n            startDate: \"\",\n            endDate: \"\"\n        });\n        setShowForm(false);\n    };\n\n     // Función para obtener las tareas del usuario autenticado\n     const fetchTask = async () => {\n        if (!userId) return;\n        try {\n            const  response = await fetch(`http://localhost:4000/api/act-user/${userId}`);\n            const data = await response.json();\n            setTaskList(data);\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n        }\n     };\n\n     // useEffect para cargar el ID del usuario autenticado y las tareas al montar el componente\n     useEffect(() =>{\n        const storeUserId = localStorage.getItem(\"userId\");\n        if (storeUserId) {\n            setUserId(storeUserId);\n        }\n     }, [] );\n\n    useEffect(() => {\n        fetchTask();\n    } , [userId]);\n\n    return (\n        <div className=\"task-container\">\n            <div className=\"addbutton-and-form\">\n                <span className=\"add-task\" onClick={handleToggleForm}>Agregar nueva tarea +</span>\n                <form className={`form-task ${showForm ? 'show' : ''}`}>\n                    <input \n                        className=\"in-task\"\n                        type=\"text\"\n                        name=\"title\"\n                        placeholder=\"¿Qué vas a agendar?\"\n                        value={task.title}\n                        onChange={handleInputChange}\n                        required\n                    />\n                    <label>\n                        Inicia: \n                        <input \n                            className=\"sh-date\"\n                            type=\"datetime-local\"\n                            name=\"startDate\"\n                            value={task.startDate}\n                            onChange={handleInputChange}\n                            required\n                        />\n                    </label>\n                    <label>\n                        Termina: \n                        <input \n                            className=\"sh-date\"\n                            type=\"datetime-local\"\n                            name=\"endDate\"\n                            value={task.endDate}\n                            onChange={handleInputChange}\n                            required\n                        />\n                    </label>\n                    <button \n                        className=\"add-button\"\n                        type=\"submit\"\n                    >\n                        Agregar\n                    </button>\n                    <button \n                        type=\"button\"\n                        className=\"cancel\"\n                        onClick={handleCancel}\n                    >\n                        Cancelar\n                    </button>\n                </form>\n            </div>\n            <div className=\"task-list\">\n                {taskList.length > 0 ? (\n                    taskList.map((task, index) => (\n                        <div key={index} className=\"task-item\">\n                            <p><strong>Tarea:</strong> {task.description}</p>\n                            <p><strong>Inicia:</strong> {new Date(task.start_date).toLocaleString()}</p>\n                            <p><strong>Termina:</strong> {new Date(task.end_date).toLocaleString()}</p>\n                        </div>\n                    ))\n                ) : (\n                    <p>No hay tareas Pendientes.</p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default TaskArea;\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}